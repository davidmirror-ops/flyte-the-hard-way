apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-persistent
provisioner: rancher.io/local-path
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: flyte
spec:
  storageClassName: local-persistent
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: flyte
spec:
  storageClassName: local-persistent
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: flyte
  labels:
    app.kubernetes.io/name: postgres
spec:
  type: NodePort
  ports:
    - name: postgres
      port: 5432
      nodePort: 30089
      protocol: TCP
      targetPort: postgres
  selector:
    app.kubernetes.io/name: postgres

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: flyte
  labels:
    app.kubernetes.io/name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
    spec:
      containers:
        - image: "ecr.flyte.org/ubuntu/postgres:13-21.04_beta"
          imagePullPolicy: "IfNotPresent"
          name: postgres
          env:
            - name: POSTGRES_PASSWORD
              value: <DB_PASSWORD>
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_DB
              value: flyteadmin
          ports:
            - containerPort: 5432
              name: postgres
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 128Mi
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgresql-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: flyte
  labels:
    app.kubernetes.io/name: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
    spec:
      containers:
        - image: "bitnami/minio:2023.7.18-debian-11-r2"
          imagePullPolicy: "IfNotPresent"
          name: minio
          env:
            #change the following values if needed. Make sure to apply these changes also to the corresponding fields in the local-values.yaml file
            - name: MINIO_ROOT_USER
              value: minio
            - name: MINIO_ROOT_PASSWORD
              value: miniostorage
            - name: MINIO_DEFAULT_BUCKETS
              value: my-s3-bucket
          ports:
            - containerPort: 9000
              name: minio
            - containerPort: 9001
              name: minio-console
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 128Mi
          volumeMounts:
            - name: minio-storage
              mountPath: /data
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: minio-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: flyte
  labels:
    app.kubernetes.io/name: minio
spec:
  type: NodePort
  ports:
    - name: minio
      nodePort: 30084
      port: 9000
      protocol: TCP
      targetPort: minio
    - name: minio-console
      nodePort: 30088
      port: 9001
      protocol: TCP
      targetPort: minio-console
  selector:
    app.kubernetes.io/name: minio
